<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Album', 'doctrine');

/**
 * BaseAlbum
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $artist_id
 * @property integer $genre_id
 * @property integer $year_production_id
 * @property string $name
 * @property string $image
 * @property string $price
 * @property integer $stock
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Artist $Artist
 * @property Genre $Genre
 * @property YearProduction $YearProduction
 * @property Doctrine_Collection $StockHystory
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method integer             getArtistId()           Returns the current record's "artist_id" value
 * @method integer             getGenreId()            Returns the current record's "genre_id" value
 * @method integer             getYearProductionId()   Returns the current record's "year_production_id" value
 * @method string              getName()               Returns the current record's "name" value
 * @method string              getImage()              Returns the current record's "image" value
 * @method string              getPrice()              Returns the current record's "price" value
 * @method integer             getStock()              Returns the current record's "stock" value
 * @method timestamp           getCreatedAt()          Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()          Returns the current record's "updated_at" value
 * @method Artist              getArtist()             Returns the current record's "Artist" value
 * @method Genre               getGenre()              Returns the current record's "Genre" value
 * @method YearProduction      getYearProduction()     Returns the current record's "YearProduction" value
 * @method Doctrine_Collection getStockHystory()       Returns the current record's "StockHystory" collection
 * @method Album               setId()                 Sets the current record's "id" value
 * @method Album               setArtistId()           Sets the current record's "artist_id" value
 * @method Album               setGenreId()            Sets the current record's "genre_id" value
 * @method Album               setYearProductionId()   Sets the current record's "year_production_id" value
 * @method Album               setName()               Sets the current record's "name" value
 * @method Album               setImage()              Sets the current record's "image" value
 * @method Album               setPrice()              Sets the current record's "price" value
 * @method Album               setStock()              Sets the current record's "stock" value
 * @method Album               setCreatedAt()          Sets the current record's "created_at" value
 * @method Album               setUpdatedAt()          Sets the current record's "updated_at" value
 * @method Album               setArtist()             Sets the current record's "Artist" value
 * @method Album               setGenre()              Sets the current record's "Genre" value
 * @method Album               setYearProduction()     Sets the current record's "YearProduction" value
 * @method Album               setStockHystory()       Sets the current record's "StockHystory" collection
 * 
 * @package    aguayo
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAlbum extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('album');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('artist_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('genre_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('year_production_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('image', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('price', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('stock', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Artist', array(
             'local' => 'artist_id',
             'foreign' => 'id'));

        $this->hasOne('Genre', array(
             'local' => 'genre_id',
             'foreign' => 'id'));

        $this->hasOne('YearProduction', array(
             'local' => 'year_production_id',
             'foreign' => 'id'));

        $this->hasMany('StockHystory', array(
             'local' => 'id',
             'foreign' => 'album_id'));
    }
}